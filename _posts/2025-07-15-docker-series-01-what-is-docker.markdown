---
layout: post
title: "Docker 입문 시리즈 1편 - Docker란 무엇인가?"
date: 2025-07-15 10:00:00 +0900
categories: [Docker, DevOps, 입문]
---

Docker는 개발자들 사이에서 가장 인기 있는 컨테이너 기술 중 하나입니다. 이번 시리즈에서는 Docker를 처음 접하는 분들을 위해 기초부터 차근차근 알아보겠습니다.

## Docker가 필요한 이유

개발을 하다 보면 이런 경험을 해보신 적이 있을 겁니다:

- "내 컴퓨터에서는 잘 돌아가는데 왜 서버에서는 안 되지?"
- "팀원 컴퓨터에서는 에러가 나는데 내 컴퓨터에서는 잘 돌아가요"
- "개발 환경 설정하는데 하루가 다 갔어요"

이런 문제들이 발생하는 이유는 각 컴퓨터마다 운영체제, 설치된 프로그램 버전, 환경 설정 등이 다르기 때문입니다. Docker는 바로 이런 문제를 해결하기 위해 만들어졌습니다.

## Docker란?

Docker는 **컨테이너 기반의 오픈소스 가상화 플랫폼**입니다. 쉽게 말해, 애플리케이션과 그 애플리케이션이 실행되는 데 필요한 모든 것(코드, 런타임, 시스템 도구, 라이브러리 등)을 하나의 패키지로 만들어주는 도구입니다.

### 컨테이너(Container)란?

컨테이너는 애플리케이션을 실행하기 위한 격리된 환경입니다. 마치 화물 컨테이너처럼:

- **표준화**: 어디서든 같은 방식으로 실행됩니다
- **이식성**: 한 곳에서 다른 곳으로 쉽게 옮길 수 있습니다
- **격리성**: 다른 컨테이너나 호스트 시스템에 영향을 주지 않습니다

## Docker vs 가상머신(VM)

Docker를 이해하기 위해 가상머신과 비교해보겠습니다:

### 가상머신 (Virtual Machine)
- 하드웨어를 가상화합니다
- 각 VM마다 운영체제 전체를 포함합니다
- 무겁고 시작 시간이 오래 걸립니다 (수 분)
- 많은 리소스를 사용합니다 (수 GB)

### Docker 컨테이너
- 운영체제 수준에서 가상화합니다
- 호스트 OS의 커널을 공유합니다
- 가볍고 시작 시간이 빠릅니다 (수 초)
- 적은 리소스를 사용합니다 (수십 MB)

## Docker의 주요 구성 요소

### 1. Docker 이미지 (Image)
- 컨테이너를 만들기 위한 **읽기 전용 템플릿**입니다
- 애플리케이션과 필요한 모든 의존성을 포함합니다
- 레이어 구조로 되어 있어 효율적입니다

### 2. Docker 컨테이너 (Container)
- 이미지를 실행한 **인스턴스**입니다
- 실제로 애플리케이션이 동작하는 곳입니다
- 생성, 시작, 중지, 삭제가 가능합니다

### 3. Docker Hub
- Docker 이미지를 저장하고 공유하는 **클라우드 저장소**입니다
- GitHub과 비슷한 역할을 합니다
- 공식 이미지와 커뮤니티 이미지를 찾을 수 있습니다

### 4. Dockerfile
- Docker 이미지를 만들기 위한 **설정 파일**입니다
- 이미지 생성 과정을 코드로 관리할 수 있습니다

## Docker의 장점

1. **일관된 환경**: 개발, 테스트, 프로덕션 환경을 동일하게 유지할 수 있습니다
2. **빠른 배포**: 컨테이너는 빠르게 시작하고 중지할 수 있습니다
3. **효율적인 리소스 사용**: VM보다 훨씬 적은 리소스를 사용합니다
4. **확장성**: 필요에 따라 컨테이너를 쉽게 늘리거나 줄일 수 있습니다
5. **이식성**: 어떤 환경에서든 동일하게 동작합니다

## Docker 사용 사례

- **마이크로서비스 아키텍처**: 각 서비스를 독립적인 컨테이너로 운영
- **CI/CD 파이프라인**: 일관된 빌드와 배포 환경 구축
- **개발 환경 표준화**: 팀원 모두가 동일한 개발 환경 사용
- **애플리케이션 격리**: 여러 애플리케이션을 한 서버에서 안전하게 실행

## 마무리

Docker는 현대 소프트웨어 개발에서 필수적인 도구가 되었습니다.
컨테이너 기술을 통해 "내 컴퓨터에서는 되는데?"라는 문제를 해결하고, 개발부터 배포까지의 과정을 더 효율적으로 만들어줍니다.

다음 편에서는 Docker를 직접 설치하고 환경을 설정하는 방법을 알아보겠습니다. Docker의 세계로 함께 떠나봅시다!

## 다음 편 예고

- Docker 설치 방법 (Windows, Mac, Linux)
- Docker Desktop 소개
- 기본 설정 및 확인
- 첫 번째 Docker 명령어 실행

이 시리즈를 통해 Docker를 자신있게 사용할 수 있게 되시길 바랍니다!